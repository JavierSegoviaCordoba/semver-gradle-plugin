{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#semver-gradle-plugin","title":"Semver Gradle Plugin","text":"<p>Set projects versions based on git tags and following semantic versioning.</p> <p>Inspired on Reckon but centered on supporting multi-project versions and combine normal stages with <code>snapshot</code> stage.</p>"},{"location":"#apply-the-plugin","title":"Apply the plugin","text":"<p>In order to support configuration cache or project isolation the plugin must be applied to each project or using the settings plugin. Avoid using <code>allprojects</code> or <code>subprojects</code>.</p> <pre><code>// build.gradle.kts\nplugins {\n    id(\"com.javiersc.semver\") version \"$version\"\n}\n</code></pre> <p>It is possible to apply the plugin to all projects if the plugin is applied in the <code>settings.gradle</code> or <code>settings.gradle.kts</code> file:</p> <pre><code>// settings.gradle.kts\nplugins {\n    id(\"com.javiersc.semver\") version \"$version\"\n}\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Check documented examples or test examples to understand easily how it works.</p>"},{"location":"#usage","title":"Usage","text":"<p>There are three project properties which the plugin uses to detect automatically the current version based on the last tag in the current branch: <code>semver.stage</code>, <code>semver.scope</code> and <code>semver.tagPrefix</code>.</p> <p>They can be set via CLI, for example:</p> <pre><code>./gradlew \"-Psemver.stage=final\" \"-Psemver.scope=major\" \"-Psemver.tagPrefix=v\"\n</code></pre> <ul> <li><code>semver.stage</code> indicates the stage to be changed, for example, <code>alpha</code></li> <li><code>semver.scope</code> indicates the scope to be changed, for example, <code>patch</code></li> <li><code>semver.tagPrefix</code> is used to know which version is going to be changed based on the tag prefix,   for example <code>v</code>. If the projects have different tag prefix, it is necessary to disambiguate which   version is going to be bumped.</li> <li><code>semver.logOnlyOnRootProject</code> is used to log the version in the CLI only on the root project, by   default it is <code>false</code>. It can be useful to avoid the version log in multi-project builds. It can   be added to the root <code>gradle.properties</code> file to avoid passing it constantly via CLI.</li> </ul> <p>Default values:</p> default value Optional stage <code>auto</code> Yes* scope <code>auto</code> Yes* tagPrefix <code>auto</code> Yes* logOnlyOnRootProject <code>false</code> Yes* <p>Depends on the use case*</p>"},{"location":"#plugin-extension","title":"Plugin extension","text":"<pre><code>semver {\n    isEnabled.set(true)\n    tagPrefix.set(\"\")\n    commitsMaxCount.set(-1)\n    gitDir.set(rootDir.resolve(\".git\"))\n}\n</code></pre> <ul> <li>Default values:</li> </ul> default value isEnabled <code>true</code> tagPrefix <code></code>, empty string commitsMaxCount <code>-1</code> gitDir <code>rootDir.resolve(\".git\")</code> mapVersion function calculated version <p><code>tagPrefix</code> is used to asociate a project version with a tag prefix, and it allows having different versions in multi-project builds.</p> <p>An example can be setting the extension prefix to <code>v</code> in a specific project A and the last tags in the last commit are: <code>v1.0.0</code> and <code>w3.0.1</code>. The project A version is <code>v1.0.0</code>. If a project B sets the prefix to <code>w</code>, the project B version is <code>w3.0.1</code>.</p> <p>In order to improve the performance on large repositories with a lot of commits, it is possible to limit the number of commits to be checked via <code>commitsMaxCount</code>. By default, it is <code>-1</code> which means that all commits are checked.</p> <p><code>semver</code> contains <code>commits: Provider&lt;List&lt;Commit&gt;&gt;</code> to get the commits in the current branch and the associated tags to each one which can be useful in some use cases.</p>"},{"location":"#semvertagprefix-project-property-via-cli-or-gradleproperties-file","title":"<code>semver.tagPrefix</code> project property via CLI or <code>gradle.properties</code> file","text":"<pre><code>\"-Psemver.tagPrefix=v\"\n</code></pre> <pre><code>semver.tagPrefix=v\n</code></pre> <p>If it is necessary to bump the project version, for example to <code>v3.0.2</code> from <code>v3.0.1</code>, but at same time there are more project with different prefixes, the plugin needs to know which tag prefix is going to be bumped, so <code>semver.tagPrefix</code> property is the solution to that problem.</p> <p>To get it working:</p> <pre><code>./gradlew \"-Psemver.scope=patch\" \"-Psemver.tagPrefix=v\"\n</code></pre> <p>It is possible to set the project tag prefix via Gradle property if some third-party plugin requires the version in configuration phase. This property is:</p> <pre><code>semver.project.tagPrefix=v\n</code></pre> <p>As it can be useful to change the number of commits to be checked, it is possible to set it via properties too:</p> <pre><code>semver.commitsMaxCount=100\n</code></pre> <p>Or in the CLI:</p> <pre><code>./gradlew \"-Psemver.commitsMaxCount=100\"\n</code></pre>"},{"location":"#map-the-version","title":"Map the version","text":"<p>The <code>semver</code> extension has a <code>mapVersion</code> function which allows to map the version easily:</p> <pre><code>// if last tag is v3.0.1, and the Kotlin version is 1.9.0,\n// the version will be `v3.0.1+1.9.0`\nsemver {\n    tagPrefix.set(\"v\")\n    mapVersion { gradleVersion: GradleVersion -&gt;\n        val kotlinVersion: String = getKotlinPluginVersion()\n        \"${gradleVersion.copy(metadata = kotlinVersion)}\"\n    }\n}\n</code></pre>"},{"location":"#override-the-version","title":"Override the version","text":"<pre><code>semver {\n    mapVersion { \"1.0.0\" }\n}\n</code></pre>"},{"location":"#additional-notes","title":"Additional notes","text":""},{"location":"#empty-tag-prefix-for-all-projects","title":"Empty tag prefix for all projects","text":"<p>If all projects are not using a tag prefix, or in other words, the tag prefix is empty, both the property in the extension and the project property via CLI or <code>gradle.properties</code> file are irrelevant.</p>"},{"location":"#same-tag-prefix-for-all-projects","title":"Same tag prefix for all projects","text":"<p>If all projects share a tag prefix, it is easier to set it in the root project <code>gradle.properties</code> file instead of passing it constantly via CLI.</p>"},{"location":"#version-types","title":"Version types","text":"<p>The whole format can be:</p> <pre><code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;[-&lt;stage&gt;.&lt;num&gt;][.&lt;commits number&gt;+&lt;hash&gt;][+&lt;metadata&gt;]\n</code></pre>"},{"location":"#final","title":"Final","text":"<ul> <li>Format: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code></li> <li>Example: <code>1.0.0</code></li> </ul>"},{"location":"#significant","title":"Significant","text":"<ul> <li>Format: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;[-&lt;stage&gt;.&lt;num&gt;]</code></li> <li>Example: <code>1.0.0-alpha.1</code></li> </ul>"},{"location":"#insignificant","title":"Insignificant","text":"<ul> <li> <p>Format:</p> <ul> <li>Clean repository: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;[-&lt;stage&gt;.&lt;num&gt;][.&lt;commits number&gt;+&lt;hash&gt;]</code></li> <li>Dirty repository: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;[-&lt;stage&gt;.&lt;num&gt;][.&lt;commits number&gt;+&lt;DIRTY&gt;]</code></li> </ul> </li> <li> <p>Examples:</p> <ul> <li><code>1.0.0.4+26f0484</code></li> <li><code>1.0.0.4+DIRTY</code></li> </ul> </li> </ul> <p>It is used the <code>DIRTY</code> suffix instead of a timestamp in order to avoid issues with any Gradle cache.</p>"},{"location":"#snapshot","title":"Snapshot","text":"<ul> <li>Format: <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-SNAPSHOT</code></li> <li>Example: <code>1.0.0-SNAPSHOT</code></li> </ul>"},{"location":"#stages","title":"Stages","text":"<p>To change between stages, use the Gradle project property <code>-Psemver.stage=&lt;stage&gt;</code></p> <p>There are reserved stages that can be used to create certain versions:</p> <ul> <li><code>final</code>: It creates a version without a suffix stage, for example, <code>1.0.1</code>.</li> <li><code>auto</code>: It calculates automatically the next stage based on the previous stage.</li> <li><code>snapshot</code>: It generate the next snapshot version, for example, <code>1.0.1-SNAPSHOT</code>.</li> </ul> <pre><code># gradle.properties\nsemver.tagPrefix=v\n</code></pre> <pre><code># Last tag = v1.0.0-alpha.1\n./gradlew \"-Psemver.stage=alpha\" # v1.0.0-alpha.2\n./gradlew \"-Psemver.stage=beta\" # v1.0.0-beta.1\n./gradlew \"-Psemver.stage=rc\" # v1.0.0-rc.1\n./gradlew \"-Psemver.stage=snapshot\" # v1.0.1-SNAPSHOT (uses the next patch version)\n./gradlew \"-Psemver.stage=final\" # v1.0.0\n./gradlew \"-Psemver.stage=auto\" # v1.0.0-alpha.2\n\n# Last tag = v1.0.0\n./gradlew \"-Psemver.stage=alpha\" # v1.0.1-alpha.1\n./gradlew \"-Psemver.stage=beta\" # v1.0.1-beta.1\n./gradlew \"-Psemver.stage=rc\" # v1.0.1-rc.1\n./gradlew \"-Psemver.stage=snapshot\" # v1.0.1-SNAPSHOT (still uses the same patch version)\n./gradlew \"-Psemver.stage=final\" # v1.0.1\n./gradlew \"-Psemver.stage=auto\" # v1.0.1\n</code></pre> <p>The stage order is based on the Gradle official rules, some samples are:</p> <ul> <li>If both are non-numeric, the parts are compared alphabetically, in a case-sensitive manner:   <code>1.0.0-ALPHA.1</code> &lt; <code>1.0.0-BETA.1</code> &lt; <code>1.0.0-alpha.1</code> &lt; <code>1.0.0-beta.1</code>.</li> <li><code>dev</code> is considered lower than any non-numeric   part: <code>1.0.0-dev.1</code> &lt; <code>1.0.0-ALPHA.1</code> &lt; <code>1.0.0-alpha.1</code> &lt; <code>1.0.0-rc.1</code>.</li> <li>The strings <code>rc</code>, <code>snapshot</code>, <code>final</code>, <code>ga</code>, <code>release</code> and <code>sp</code> are considered higher than any   other string part (sorted in this order): <code>1.0.0-zeta.1</code> &lt; <code>1.0.0-rc.1</code> &lt; <code>1.0.0-snapshot</code> &lt;   <code>1.0.0-ga.1</code> &lt; <code>1.0.0-release.1</code> &lt; <code>1.0.0-sp.1</code> &lt; <code>1.0.0</code>.</li> <li>These particular values are NOT case-sensitive, as opposed to regular string parts and do not   depend on the separator used around them: <code>1.0.0-RC.1</code> == <code>1.0.0-rc.1</code>.</li> </ul> <p>Gradle\u2019s docs can be found here</p>"},{"location":"#scopes","title":"Scopes","text":"<p>To change between scopes, use the Gradle property <code>-Psemver.scope=&lt;scope&gt;</code></p> <p>The scope has to be one of <code>major</code>, <code>minor</code>, <code>patch</code> or <code>auto</code>.</p> <pre><code># gradle.properties\nsemver.tagPrefix=v\n</code></pre> <pre><code># Last tag = v1.0.0-alpha.1\n./gradlew \"-Psemver.scope=major\" # v2.0.0\n./gradlew \"-Psemver.scope=minor\" # v1.1.0\n./gradlew \"-Psemver.scope=patch\" # v1.0.1\n./gradlew \"-Psemver.scope=auto\" # v1.0.0-alpha.2 (uses the next num version)\n\n# Last tag = v1.0.0\n./gradlew \"-Psemver.scope=major\" # v2.0.0\n./gradlew \"-Psemver.scope=minor\" # v1.1.0\n./gradlew \"-Psemver.scope=patch\" # v1.0.1\n./gradlew \"-Psemver.scope=auto\" # v1.0.1 (uses the next patch version)\n</code></pre>"},{"location":"#combine-stages-and-scopes","title":"Combine stages and scopes","text":"<pre><code># gradle.properties\nsemver.tagPrefix=v\n</code></pre> <pre><code># Last tag = v1.0.0-alpha.1\n./gradlew \"-Psemver.stage=alpha\" \"-Psemver.scope=major\" # v2.0.0-alpha.1\n./gradlew \"-Psemver.stage=beta\" \"-Psemver.scope=major\" # v2.0.0-beta.1\n./gradlew \"-Psemver.stage=rc\" \"-Psemver.scope=major\" # v2.0.0-rc.1\n./gradlew \"-Psemver.stage=final\" \"-Psemver.scope=major\" # v2.0.0\n./gradlew \"-Psemver.stage=snapshot\" \"-Psemver.scope=major\" # v2.0.0-SNAPSHOT\n./gradlew \"-Psemver.stage=auto\" \"-Psemver.scope=auto\" # v1.0.0-alpha.2\n\n# Last tag = v1.0.0-alpha.1\n./gradlew \"-Psemver.stage=alpha\" \"-Psemver.scope=minor\" # v1.1.0-alpha.1\n./gradlew \"-Psemver.stage=beta\" \"-Psemver.scope=minor\" # v1.1.0-beta.1\n./gradlew \"-Psemver.stage=rc\" \"-Psemver.scope=minor\" # v1.1.0-rc.1\n./gradlew \"-Psemver.stage=final\" \"-Psemver.scope=minor\" # v1.1.0\n./gradlew \"-Psemver.stage=snapshot\" \"-Psemver.scope=minor\" # v1.1.0-SNAPSHOT\n\n# Last tag = v1.0.0-alpha.1\n./gradlew \"-Psemver.stage=alpha\" \"-Psemver.scope=patch\" # v1.0.1-alpha.1\n./gradlew \"-Psemver.stage=beta\" \"-Psemver.scope=patch\" # v1.0.1-beta.1\n./gradlew \"-Psemver.stage=rc\" \"-Psemver.scope=patch\" # v1.0.1-rc.1\n./gradlew \"-Psemver.stage=final\" \"-Psemver.scope=patch\" # v1.0.1\n./gradlew \"-Psemver.stage=snapshot\" \"-Psemver.scope=patch\" # v1.0.1-SNAPSHOT\n\n# Last tag = v1.0.0-alpha.1\n./gradlew \"-Psemver.stage=alpha\" \"-Psemver.scope=auto\" # v1.0.0-alpha.2\n./gradlew \"-Psemver.stage=beta\" \"-Psemver.scope=auto\" # v1.0.1-beta.1\n./gradlew \"-Psemver.stage=rc\" \"-Psemver.scope=auto\" # v1.0.1-rc.1\n./gradlew \"-Psemver.stage=final\" \"-Psemver.scope=auto\" # v1.0.1\n./gradlew \"-Psemver.stage=snapshot\" \"-Psemver.scope=auto\" # v1.0.1-SNAPSHOT\n\n# Last tag = v1.0.0\n./gradlew \"-Psemver.stage=alpha\" \"-Psemver.scope=major\" # v2.0.0-alpha.1\n./gradlew \"-Psemver.stage=beta\" \"-Psemver.scope=major\" # v2.0.0-beta.1\n./gradlew \"-Psemver.stage=rc\" \"-Psemver.scope=major\" # v2.0.0-rc.1\n./gradlew \"-Psemver.stage=final\" \"-Psemver.scope=major\" # v2.0.0\n./gradlew \"-Psemver.stage=snapshot\" \"-Psemver.scope=major\" # v2.0.0-SNAPSHOT\n./gradlew \"-Psemver.stage=auto\" \"-Psemver.scope=auto\" # v1.0.1\n\n# Last tag = v1.0.0\n./gradlew \"-Psemver.stage=alpha\" \"-Psemver.scope=minor\" # v1.1.0-alpha.1\n./gradlew \"-Psemver.stage=beta\" \"-Psemver.scope=minor\" # v1.1.0-beta.1\n./gradlew \"-Psemver.stage=rc\" \"-Psemver.scope=minor\" # v1.1.0-rc.1\n./gradlew \"-Psemver.stage=final\" \"-Psemver.scope=minor\" # v1.1.0\n./gradlew \"-Psemver.stage=snapshot\" \"-Psemver.scope=minor\" # v1.1.0-SNAPSHOT\n\n# Last tag = v1.0.0\n./gradlew \"-Psemver.stage=alpha\" \"-Psemver.scope=patch\" # v1.0.1-alpha.1\n./gradlew \"-Psemver.stage=beta\" \"-Psemver.scope=patch\" # v1.0.1-beta.1\n./gradlew \"-Psemver.stage=rc\" \"-Psemver.scope=patch\" # v1.0.1-rc.1\n./gradlew \"-Psemver.stage=final\" \"-Psemver.scope=patch\" # v1.0.1\n./gradlew \"-Psemver.stage=snapshot\" \"-Psemver.scope=patch\" # v1.0.1-SNAPSHOT\n\n# Last tag = v1.0.0\n./gradlew \"-Psemver.stage=alpha\" \"-Psemver.scope=auto\" # v1.0.1-alpha.1\n./gradlew \"-Psemver.stage=beta\" \"-Psemver.scope=auto\" # v1.0.1-beta.1\n./gradlew \"-Psemver.stage=rc\" \"-Psemver.scope=auto\" # v1.0.1-rc.1\n./gradlew \"-Psemver.stage=final\" \"-Psemver.scope=auto\" # v1.0.1\n./gradlew \"-Psemver.stage=snapshot\" \"-Psemver.scope=auto\" # v1.0.1-SNAPSHOT\n</code></pre>"},{"location":"#tasks","title":"Tasks","text":"<p>There are three tasks:</p> <ul> <li><code>printSemver</code>: Prints the tag in CLI and create a file in <code>build/semver/version.txt</code> which has two   lines; the version without the tag and the version including the tag.</li> <li><code>createSemverTag</code>. Creates a git tag.</li> <li><code>pushSemverTag</code>. Creates and pushes a git tag to the remote.</li> </ul> <p>You can combine them with any <code>semver</code> project properties to ensure the correct tag version is printed, created or pushed.</p> <p><code>pushSemverTag</code> can use a specific remote if the Gradle property <code>semver.remote</code> is set. If it is not set, <code>origin</code> is used if it exists, if not, the first remote by name is used. If there is no remote, the task fails.</p> <p>Samples:</p> <pre><code>./gradlew createSemverTag\n\n./gradlew createSemverTag \"-Psemver.stage=alpha\"\n\n./gradlew pushSemverTag\n\n./gradlew pushSemverTag \"-Psemver.stage=alpha\"\n</code></pre>"},{"location":"#set-versions-without-dirty-suffix-on-dirty-repositories","title":"Set versions without <code>DIRTY</code> suffix on dirty repositories","text":"<p>By default, if the repository status is not clean, the version shows the suffix <code>DIRTY</code> but that can be avoided by setting the Gradle property <code>semver.checkClean</code>.</p> <p>For example, if the last tag is <code>1.0.0</code>, there are 23 commits between that tag and the last commit and the repo is not clean:</p> <pre><code>./gradlew \"-Psemver.stage=final\" \"-Psemver.scope=patch\"\n\nsemver: 1.0.0.23+DIRTY\n</code></pre> <pre><code>./gradlew \"-Psemver.stage=final\" \"-Psemver.scope=patch\" \"-Psemver.checkClean=false\"\nsemver: 1.0.1\n</code></pre> <pre><code>./gradlew \"-Psemver.checkClean=false\"\nsemver: 1.0.0.23+1a2cd5b2 # 1a2cd5b2 is the last commit hash\n</code></pre>"},{"location":"#faq","title":"FAQ","text":""},{"location":"#included-builds-support","title":"Included builds support","text":"<p>The plugin supports included builds, but it is necessary to specify the <code>.git</code> directory as there is no reliable way to get the <code>.git</code> directory from the main build in the included build.</p> <p>There are two ways to specify the <code>.git</code> directory</p> <ul> <li>On all projects <code>build.gradle.kts</code></li> <li>In the <code>settings.gradle.kts</code></li> </ul> <p>Example for the next project structure:</p> <pre><code>root/\n\u251c\u2500\u2500 settings.gradle.kts\n\u2514\u2500\u2500 build-logic/\n    \u2514\u2500\u2500 settings.gradle.kts\n</code></pre> <p>Specify the <code>.git</code> directory in the <code>build-logic/settings.gradle.kts</code> file:</p> <pre><code>semver {\n    gitDir.set(rootDir.parentFile.resolve(\".git\"))\n}\n</code></pre>"},{"location":"#mapversion-function-workaround-on-groovy","title":"<code>mapVersion</code> function workaround on Groovy","text":"<p>Due to calling <code>mapVersion</code> in Groovy, it is possible to get the error:</p> <ul> <li>https://github.com/gradle/gradle/issues/30830</li> </ul> <pre><code>Could not serialize value of type $Proxy96\n</code></pre> <p>Being <code>96</code> a random number.</p> <p>The workaround is:</p> <pre><code>class SemverWorkaround {\n    static mapper = new VersionMapper() {\n        @Override\n        String map(GradleVersion gradleVersion) {\n            \"2.0.0\"\n        }\n    }\n}\n\nsemver {\n    mapVersion SemverWorkaround.mapper\n}\n</code></pre> <p>It works on settings and project script files.</p>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2024 Javier Segovia C\u00f3rdoba\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#090-2025-08-17","title":"0.9.0 - 2025-08-17","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li><code>gitDir</code> type from <code>RegularFileProperty</code> to <code>DirectoryProperty</code></li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>included build support</li> </ul>"},{"location":"CHANGELOG/#updated","title":"Updated","text":"<ul> <li><code>gradle -&gt; 9.0.0</code></li> <li><code>com.javiersc.hubdle:com.javiersc.hubdle.gradle.plugin -&gt; 0.14.2</code></li> </ul>"},{"location":"CHANGELOG/#080-2024-10-09","title":"0.8.0 - 2024-10-09","text":""},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>plugin id <code>com.javiersc.semver.project</code></li> <li>plugin id <code>com.javiersc.semver.settings</code></li> </ul>"},{"location":"CHANGELOG/#updated_1","title":"Updated","text":"<ul> <li><code>com.javiersc.hubdle:com.javiersc.hubdle.gradle.plugin -&gt; 0.7.12</code></li> </ul>"},{"location":"CHANGELOG/#071-2024-09-26","title":"0.7.1 - 2024-09-26","text":""},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>commit number not being null</li> </ul>"},{"location":"CHANGELOG/#removed_1","title":"Removed","text":"<ul> <li>unnecessary call to <code>Git</code> in <code>GitCache</code></li> </ul>"},{"location":"CHANGELOG/#updated_2","title":"Updated","text":"<ul> <li><code>gradle -&gt; 8.10.2</code></li> <li><code>com.javiersc.hubdle:com.javiersc.hubdle.gradle.plugin -&gt; 0.7.11</code></li> </ul>"},{"location":"CHANGELOG/#070-2024-08-16","title":"0.7.0 - 2024-08-16","text":""},{"location":"CHANGELOG/#removed_2","title":"Removed","text":"<ul> <li><code>GitData</code> from <code>mapVersion</code> function due performance issues</li> <li>unnecessary mapping when registering the <code>VersionValueSource</code></li> </ul>"},{"location":"CHANGELOG/#updated_3","title":"Updated","text":"<ul> <li><code>com.javiersc.hubdle:com.javiersc.hubdle.gradle.plugin -&gt; 0.7.5</code></li> </ul>"},{"location":"CHANGELOG/#062-2024-08-15","title":"0.6.2 - 2024-08-15","text":""},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>mapping version happening too late</li> </ul>"},{"location":"CHANGELOG/#removed_3","title":"Removed","text":"<ul> <li>previous fixes for calculated and metadata versions</li> </ul>"},{"location":"CHANGELOG/#updated_4","title":"Updated","text":"<ul> <li><code>com.javiersc.hubdle:com.javiersc.hubdle.gradle.plugin -&gt; 0.7.3</code></li> </ul>"},{"location":"CHANGELOG/#061-2024-08-15","title":"0.6.1 - 2024-08-15","text":""},{"location":"CHANGELOG/#fixed_3","title":"Fixed","text":"<ul> <li>crash due metadata by checking versions in configuration phase instead of execution phase </li> </ul>"},{"location":"CHANGELOG/#updated_5","title":"Updated","text":"<ul> <li><code>gradle -&gt; 8.10</code></li> </ul>"},{"location":"CHANGELOG/#060-2024-08-13","title":"0.6.0 - 2024-08-13","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Log the version only on the root project via <code>semver.logOnlyOnRootProject</code> property</li> </ul>"},{"location":"CHANGELOG/#updated_6","title":"Updated","text":"<ul> <li><code>com.javiersc.hubdle:com.javiersc.hubdle.gradle.plugin -&gt; 0.7.2</code></li> <li><code>gradle -&gt; 8.9</code></li> </ul>"},{"location":"CHANGELOG/#051-2024-03-29","title":"0.5.1 - 2024-03-29","text":""},{"location":"CHANGELOG/#fixed_4","title":"Fixed","text":"<ul> <li><code>is*</code> extensions</li> </ul>"},{"location":"CHANGELOG/#updated_7","title":"Updated","text":"<ul> <li><code>gradle -&gt; 8.7</code></li> <li><code>com.javiersc.hubdle:com.javiersc.hubdle.gradle.plugin -&gt; 0.6.5</code></li> </ul>"},{"location":"CHANGELOG/#050-2024-02-10","title":"0.5.0 - 2024-02-10","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li><code>mapVersion</code> which expose <code>GitData</code> to <code>semver</code> extension</li> <li><code>mapVersion</code> to <code>semver</code> extension</li> <li><code>version</code> to <code>semver</code> extension</li> <li><code>map</code> function to <code>LazyVersion</code></li> <li>follow Gradle version ordering</li> <li>settings plugin to apply semver plugin to all projects</li> <li><code>gitDir</code> property to <code>SemverExtension</code></li> <li><code>printSemver</code> task depends on <code>prepareKotlinIdeaImport</code> task</li> <li><code>commits: Provider&lt;Commit&gt;</code> to <code>SemverExtension</code></li> <li><code>commitsMaxCount: Provider&lt;Int&gt;</code> to <code>SemverExtension</code></li> <li><code>semver.commitsMaxCount</code> property</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li><code>Version</code> to <code>GradleVersion</code></li> <li>plugin id from <code>com.javiersc.semver.gradle.plugin</code> to <code>com.javiersc.semver</code></li> <li><code>com.javiersc.semver:semver-core</code> dependency from <code>implementation</code> to <code>api</code></li> </ul>"},{"location":"CHANGELOG/#fixed_5","title":"Fixed","text":"<ul> <li>GitHub output and environment variables in the <code>printSemver</code> task</li> <li>the stage <code>SNAPSHOT</code> is not appended at the end of the version in all cases</li> <li><code>metadata</code> doesn\u2019t allow <code>.</code>, <code>-</code>, or <code>_</code> characters</li> <li>multiple regexes invalidating valid versions</li> <li>default logger uses <code>LIFECYCLE</code> instead of <code>QUIET</code></li> </ul>"},{"location":"CHANGELOG/#removed_4","title":"Removed","text":"<ul> <li><code>LazyVersion</code></li> </ul>"},{"location":"CHANGELOG/#updated_8","title":"Updated","text":"<ul> <li><code>com.javiersc.hubdle:com.javiersc.hubdle.gradle.plugin -&gt; 0.6.2</code></li> <li><code>gradle -&gt; 8.6</code></li> <li><code>org.eclipse.jgit:org.eclipse.jgit -&gt; 6.5.0.202303070854-r</code></li> <li><code>com.javiersc.semver:semver-core -&gt; 0.1.0-beta.13</code></li> </ul>"},{"location":"examples/MULTI_PROJECT/","title":"Multi project","text":""},{"location":"examples/MULTI_PROJECT/#0-initial-repo-state","title":"0. Initial repo state","text":""},{"location":"examples/MULTI_PROJECT/#modules","title":"Modules:","text":"<ul> <li><code>library-one-a</code> uses prefix: a</li> <li><code>library-two-b</code> uses prefix: b</li> <li><code>library-three-b</code> uses prefix: b</li> <li><code>library-four-b</code> uses prefix: b</li> <li><code>library-five-b</code> uses prefix: b</li> <li><code>library-six-c</code> uses prefix: c</li> <li><code>library-seven-c</code> uses prefix: c</li> <li><code>library-eight-c</code> uses prefix: c</li> <li><code>library-nine</code> uses no prefix</li> <li><code>library-ten</code> uses no prefix</li> </ul>"},{"location":"examples/MULTI_PROJECT/#commits","title":"Commits","text":"<ul> <li>Initial commit: (hash: <code>14d9406b</code>)</li> <li>Add semver plugin to all projects (hash: <code>7f68e730</code>)</li> </ul>"},{"location":"examples/MULTI_PROJECT/#last-tags-for-all-projects","title":"Last tags for all projects","text":"<p>All projects have the same version 1.0.0 so there is four tags with that</p> <ul> <li>a1.0.0</li> <li>b1.0.0</li> <li>c1.0.0</li> <li>1.0.0</li> </ul>"},{"location":"examples/MULTI_PROJECT/#repo-state","title":"Repo state","text":"<ul> <li>Repo is not clean</li> </ul>"},{"location":"examples/MULTI_PROJECT/#1-run-gradlew-assemble","title":"1. Run <code>./gradlew assemble</code>","text":"<pre><code>semver for library-one-a: a1.0.0.0+7f68e730-DIRTY\n                          -&gt; tag prefix (a)\n                          -----&gt; base version (1.0.0)\n                          -------&gt; numbers of commits (0)\n                          -----------------&gt; DIRTY\n\nsemver for library-two-b: b1.0.0.0+7f68e730-DIRTY\nsemver for library-three-b: b1.0.0.0+7f68e730-DIRTY\nsemver for library-four-b: b1.0.0.0+7f68e730-DIRTY\nsemver for library-five-b: b1.0.0.0+7f68e730-DIRTY\nsemver for library-six-c: c1.0.0.0+7f68e730-DIRTY\nsemver for library-seven-c: c1.0.0.0+7f68e730-DIRTY\nsemver for library-eight-c: c1.0.0.0+7f68e730-DIRTY\nsemver for library-nine: 1.0.0.0+7f68e730-DIRTY\nsemver for library-ten: 1.0.0.0+7f68e730-DIRTY\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#2-create-a-new-file-in-library-one-a-then-run-gradlew-assemble","title":"2. Create a new file in <code>library-one-a</code>, then run <code>./gradlew assemble</code>","text":"<p>Version should be the same to the previous one</p>"},{"location":"examples/MULTI_PROJECT/#3-add-the-new-file-to-git-and-commit-it-then-run-gradlew-createsemvertag-psemvertagprefixa","title":"3. Add the new file to git and commit it, then run <code>./gradlew createSemverTag \"-Psemver.tagPrefix=a</code>","text":"<ul> <li>Promotes the current state to be a new version for the projects which are using as tag prefix the   value <code>a</code>.</li> <li>As we haven\u2019t passed as argument the property <code>semver.scope</code> with any valor, we are indeed   doing <code>-Psemver.scope=auto</code>, which in this case will increase the <code>patch</code>.</li> <li>Since there is a previous tag (<code>a1.0.0</code>), <code>semver.scope=auto</code> resolves automatically the next   version. The algorithm is simple:<ul> <li>If previous tag is final, the new tag increases the <code>patch</code>.</li> <li>If previous tag is non-final, the new tag increases the <code>num</code> and it keeps the previous stage.</li> </ul> </li> </ul> <pre><code>Created new semver tag: a1.0.1\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#4-run-gradlew-assemble","title":"4. Run <code>./gradlew assemble</code>","text":"<ul> <li>Because the latest commit in the branch has the tag a1.0.1, and the repo is clean, the project   version for projects which uses the tag prefix <code>a</code> is <code>1.0.1</code></li> </ul> <pre><code>semver for library-one-a: a1.0.1\n                          -&gt; tag prefix (a)\n                          -----&gt; version (1.0.1)\n\nsemver for library-two-b: b1.0.0.1+26f0484\n                          -&gt; tag prefix (b)\n                          -----&gt; version (1.0.0)\n                          ------&gt; numbers of commits (1)\n                          --------&gt; hash (26f0484)\n\nsemver for library-three-b: b1.0.0.1+26f0484\nsemver for library-four-b: b1.0.0.1+26f0484\nsemver for library-five-b: b1.0.0.1+26f0484\nsemver for library-six-c: c1.0.0.1+26f0484\nsemver for library-seven-c: c1.0.0.1+26f0484\nsemver for library-eight-c: c1.0.0.1+26f0484\nsemver for library-nine: 1.0.0.1+26f0484\nsemver for library-ten: 1.0.0.1+26f0484\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#5-create-add-and-commit-a-new-file-in-library-one-a-then-run-gradlew-assemble","title":"5. Create, add and commit a new file in <code>library-one-a</code>, then run <code>./gradlew assemble</code>","text":"<ul> <li>Because the git status is clean, instead of using a <code>-DIRTY</code> suffix, it uses the latest commit   hash.</li> </ul> <pre><code>semver for library-one-a: a1.0.1+76f0424\nsemver for library-two-b: b1.0.0.2+76f0424\nsemver for library-three-b: b1.0.0.2+76f0424\nsemver for library-four-b: b1.0.0.2+76f0424\nsemver for library-five-b: b1.0.0.2+76f0424\nsemver for library-six-c: c1.0.0.2+76f0424\nsemver for library-seven-c: c1.0.0.2+76f0424\nsemver for library-eight-c: c1.0.0.2+76f0424\nsemver for library-nine: 1.0.0.2+76f0424\nsemver for library-ten: 1.0.0.2+76f0424\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#6-run-gradlew-createsemvertag-psemvertagprefixa","title":"6. Run <code>./gradlew createSemverTag \"-Psemver.tagPrefix=a\"</code>","text":"<ul> <li>Promote the current state to a new version.</li> <li>Since there is a previous tag (<code>v1.0.2</code>), <code>createSemverTag</code> resolves automatically the next   version. The algorithm is simple:<ul> <li>If previous tag is final, the new tag increases the <code>patch</code>.</li> <li>If previous tag is non-final, the new tag increases the <code>num</code> and it keeps the previous stage.</li> </ul> </li> </ul> <pre><code>semver for library-one-a: a1.0.2\nsemver for library-two-b: b1.0.0.2+76f0424\nsemver for library-three-b: b1.0.0.2+76f0424\nsemver for library-four-b: b1.0.0.2+76f0424\nsemver for library-five-b: b1.0.0.2+76f0424\nsemver for library-six-c: c1.0.0.2+76f0424\nsemver for library-seven-c: c1.0.0.2+76f0424\nsemver for library-eight-c: c1.0.0.2+76f0424\nsemver for library-nine: 1.0.0.2+76f0424\nsemver for library-ten: 1.0.0.2+76f0424\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#7-create-add-to-git-and-commit-a-new-file-in-library-one-a-then-run-gradlew-createsemvertag-psemverstagealpha-psemvertagprefixa","title":"7. Create, add to git and commit a new file in <code>library-one-a</code>, then run <code>./gradlew createSemverTag \"-Psemver.stage=alpha\" \"-Psemver.tagPrefix=a\"</code>","text":"<ul> <li>Promote the current state to be a new alpha version for the projects with tag prefix <code>a</code>.</li> </ul> <pre><code>semver for library-one-a: a1.0.3-alpha.1\nsemver for library-two-b: b1.0.0.3+58u03s9\nsemver for library-three-b: b1.0.0.3+58u03s9\nsemver for library-four-b: b1.0.0.3+58u03s9\nsemver for library-five-b: b1.0.0.3+58u03s9\nsemver for library-six-c: c1.0.0.3+58u03s9\nsemver for library-seven-c: c1.0.0.3+58u03s9\nsemver for library-eight-c: c1.0.0.3+58u03s9\nsemver for library-nine: 1.0.0.3+58u03s9\nsemver for library-ten: 1.0.0.3+58u03s9\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#8-run-gradlew-createsemvertag-psemverstagebeta-psemvertagprefixa","title":"8. Run <code>./gradlew createSemverTag \"-Psemver.stage=beta\" \"-Psemver.tagPrefix=a\"</code>","text":"<ul> <li>Without changing the state, promote the current state to be a new beta version for the projects   with tag prefix <code>a</code>.</li> </ul> <pre><code>semver for library-one-a: a1.0.3-beta.1\nsemver for library-two-b: b1.0.0.3+58u03s9\nsemver for library-three-b: b1.0.0.3+58u03s9\nsemver for library-four-b: b1.0.0.3+58u03s9\nsemver for library-five-b: b1.0.0.3+58u03s9\nsemver for library-six-c: c1.0.0.3+58u03s9\nsemver for library-seven-c: c1.0.0.3+58u03s9\nsemver for library-eight-c: c1.0.0.3+58u03s9\nsemver for library-nine: 1.0.0.3+58u03s9\nsemver for library-ten: 1.0.0.3+58u03s9\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#9-create-add-to-git-and-commit-a-new-file-in-library-one-a-then-run-gradlew-createsemvertag-psemverstagefinal-psemvertagprefixa","title":"9. Create, add to git and commit a new file in <code>library-one-a</code>, then run <code>./gradlew createSemverTag \"-Psemver.stage=final\" \"-Psemver.tagPrefix=a\"</code>","text":"<ul> <li>Without changing the state, promote the current state to be a final version for the projects with   tag prefix <code>a</code>.</li> </ul> <pre><code>semver for library-one-a: a1.0.3\nsemver for library-two-b: b1.0.0.4+1as03k5\nsemver for library-three-b: b1.0.0.4+1as03k5\nsemver for library-four-b: b1.0.0.4+1as03k5\nsemver for library-five-b: b1.0.0.4+1as03k5\nsemver for library-six-c: c1.0.0.4+1as03k5\nsemver for library-seven-c: c1.0.0.4+1as03k5\nsemver for library-eight-c: c1.0.0.4+1as03k5\nsemver for library-nine: 1.0.0.4+1as03k5\nsemver for library-ten: 1.0.0.4+1as03k5\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#10-run-gradlew-createsemvertag-psemverstagefinal-psemverscopemajor-psemvertagprefixa","title":"10. Run <code>./gradlew createSemverTag \"-Psemver.stage=final\" \"-Psemver.scope=major \"-Psemver.tagPrefix=a\"</code>","text":"<ul> <li>Without changing the state, promote the current state to be the <code>2.0.0</code> version for the projects   with tag prefix <code>a</code>.</li> </ul> <pre><code>semver for library-one-a: a2.0.0\nsemver for library-two-b: b1.0.0.4+1as03k5\nsemver for library-three-b: b1.0.0.4+1as03k5\nsemver for library-four-b: b1.0.0.4+1as03k5\nsemver for library-five-b: b1.0.0.4+1as03k5\nsemver for library-six-c: c1.0.0.4+1as03k5\nsemver for library-seven-c: c1.0.0.4+1as03k5\nsemver for library-eight-c: c1.0.0.4+1as03k5\nsemver for library-nine: 1.0.0.4+1as03k5\nsemver for library-ten: 1.0.0.4+1as03k5\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#11-run-gradlew-publishtomavenlocal-psemverstagesnapshot-psemvertagprefixa","title":"11. Run <code>./gradlew publishToMavenLocal \"-Psemver.stage=snapshot\" \"-Psemver.tagPrefix=a\"</code>","text":"<ul> <li>A common approach is publishing the artifacts to the snapshot repository with each commit merged   to some branch.</li> <li>Without changing the state and without creating a new tag, the project uses the next patched   version by just submitting the snapshot scope.</li> </ul> <pre><code>semver for library-one-a: a2.0.1-SNAPSHOT\nsemver for library-two-b: b1.0.0.4+1as03k5\nsemver for library-three-b: b1.0.0.4+1as03k5\nsemver for library-four-b: b1.0.0.4+1as03k5\nsemver for library-five-b: b1.0.0.4+1as03k5\nsemver for library-six-c: c1.0.0.4+1as03k5\nsemver for library-seven-c: c1.0.0.4+1as03k5\nsemver for library-eight-c: c1.0.0.4+1as03k5\nsemver for library-nine: 1.0.0.4+1as03k5\nsemver for library-ten: 1.0.0.4+1as03k5\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#12-run-gradlew-createsemvertag-psemverscopeminor-psemvertagprefixb","title":"12. Run <code>./gradlew createSemverTag \"-Psemver.scope=minor\" \"-Psemver.tagPrefix=b\"</code>","text":"<pre><code>semver for library-one-a: a2.0.0\nsemver for library-two-b: b1.1.0\nsemver for library-three-b: b1.1.0\nsemver for library-four-b: b1.1.0\nsemver for library-five-b: b1.1.0\nsemver for library-six-c: c1.0.0.4+1as03k5\nsemver for library-seven-c: c1.0.0.4+1as03k5\nsemver for library-eight-c: c1.0.0.4+1as03k5\nsemver for library-nine: 1.0.0.4+1as03k5\nsemver for library-ten: 1.0.0.4+1as03k5\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#13-run-gradlew-createsemvertag-psemverstagerc-psemvertagprefixc","title":"13. Run <code>./gradlew createSemverTag \"-Psemver.stage=rc\" \"-Psemver.tagPrefix=c\"</code>","text":"<pre><code>semver for library-one-a: a2.0.0\nsemver for library-two-b: b1.1.0\nsemver for library-three-b: b1.1.0\nsemver for library-four-b: b1.1.0\nsemver for library-five-b: b1.1.0\nsemver for library-six-c: c1.0.1-rc.1\nsemver for library-seven-c: c1.0.1-rc.1\nsemver for library-eight-c: c1.0.1-rc.1\nsemver for library-nine: 1.0.0.4+1as03k5\nsemver for library-ten: 1.0.0.4+1as03k5\n</code></pre>"},{"location":"examples/MULTI_PROJECT/#14-run-gradlew-createsemvertag-psemverstagedev","title":"14. Run <code>./gradlew createSemverTag \"-Psemver.stage=dev\"</code>","text":"<pre><code>semver for library-one-a: a2.0.0\nsemver for library-two-b: b1.1.0\nsemver for library-three-b: b1.1.0\nsemver for library-four-b: b1.1.0\nsemver for library-five-b: b1.1.0\nsemver for library-six-c: c1.0.1-rc.1\nsemver for library-seven-c: c1.0.1-rc.1\nsemver for library-eight-c: c1.0.1-rc.1\nsemver for library-nine: 1.0.1-dev.1\nsemver for library-ten: 1.0.1-dev.1\n</code></pre>"},{"location":"examples/SINGLE_PROJECT/","title":"Single project","text":""},{"location":"examples/SINGLE_PROJECT/#0-initial-repo-state","title":"0. Initial repo state","text":""},{"location":"examples/SINGLE_PROJECT/#modules","title":"Modules:","text":"<ul> <li>Root project</li> </ul>"},{"location":"examples/SINGLE_PROJECT/#commits","title":"Commits","text":"<ul> <li>Initial commit: (hash: <code>14d9406b</code>)</li> <li>Add config (hash: <code>cd48c99a</code>)</li> <li>Add plugin (hash: <code>7f68e730</code>)</li> </ul>"},{"location":"examples/SINGLE_PROJECT/#repo-state","title":"Repo state","text":"<ul> <li>Repo is not clean</li> </ul>"},{"location":"examples/SINGLE_PROJECT/#1-run-gradlew-assemble","title":"1. Run <code>./gradlew assemble</code>","text":"<ul> <li>Base version when there is no tag is <code>0.1.0</code></li> </ul> <pre><code>semver for the root project: 0.1.0.0+7f68e730-DIRTY\n                             -----&gt; base version (0.1.0)\n                             ------&gt; numbers of commits (0)\n                             ----------------&gt; DIRTY\n</code></pre>"},{"location":"examples/SINGLE_PROJECT/#2-create-a-new-file-and-run-gradlew-assemble","title":"2. Create a new file and run <code>./gradlew assemble</code>","text":"<p>Version should be the same than the previous one</p>"},{"location":"examples/SINGLE_PROJECT/#3-add-the-new-file-to-git-commit-it-and-run-gradlew-createsemvertag","title":"3. Add the new file to git, commit it, and run <code>./gradlew createSemverTag</code>","text":"<ul> <li>Promotes the current state to be a new version. A new tag is created with the value <code>v0.1.0</code></li> </ul> <pre><code>Created new semver tag: v0.1.0\n</code></pre>"},{"location":"examples/SINGLE_PROJECT/#4-run-gradlew-assemble","title":"4. Run <code>./gradlew assemble</code>","text":"<ul> <li>Because the latest commit in the branch has the tag v.1.0, the project version is <code>0.1.0</code></li> </ul> <pre><code>semver: 0.1.0\n</code></pre>"},{"location":"examples/SINGLE_PROJECT/#5-create-add-commit-a-new-file-and-run-gradlew-assemble","title":"5. Create, add, commit a new file and run <code>./gradlew assemble</code>","text":"<ul> <li>Because the git status is clean, instead of using a <code>DIRTY</code> suffix, it uses the latest commit   hash.</li> </ul> <pre><code>semver: 0.1.0.1+26f0484\n        -----&gt; base version (0.1.0)\n        ------&gt; numbers of commits (1)\n        --------&gt; hash (26f0484)\n</code></pre>"},{"location":"examples/SINGLE_PROJECT/#6-run-gradlew-createsemvertag","title":"6. Run <code>./gradlew createSemverTag</code>","text":"<ul> <li>Promote the current state to a new version.</li> <li>Since there is a previous tag (<code>v0.1.0</code>), <code>createSemverTag</code> resolves automatically the next   version. The algorithm is simple:<ul> <li>If previous tag is final, the new tag increases the <code>patch</code>.</li> <li>If previous tag is non-final, the new tag increases the <code>num</code> and it keeps the previous stage.</li> </ul> </li> </ul> <pre><code>Created new semver tag: v0.1.1\n</code></pre>"},{"location":"examples/SINGLE_PROJECT/#7-create-and-add-to-git-a-new-file-then-run-gradlew-createsemvertag-psemverstagealpha","title":"7. Create and add to git a new file, then run <code>./gradlew createSemverTag \"-Psemver.stage=alpha\"</code>","text":"<ul> <li>Promote the current state to be a new alpha version.</li> </ul> <pre><code>Created new semver tag: v0.1.2-alpha.1\n</code></pre>"},{"location":"examples/SINGLE_PROJECT/#8-run-gradlew-createsemvertag-psemverstagebeta","title":"8. Run <code>./gradlew createSemverTag \"-Psemver.stage=beta\"</code>","text":"<ul> <li>Without changing the state, promote the current state to be a new beta version.</li> </ul> <pre><code>Created new semver tag: v0.1.2-beta.1\n</code></pre>"},{"location":"examples/SINGLE_PROJECT/#9-create-and-add-to-git-a-new-file-then-run-gradlew-createsemvertag-psemverstagefinal","title":"9. Create and add to git a new file, then run <code>./gradlew createSemverTag \"-Psemver.stage=final\"</code>","text":"<ul> <li>Without changing the state, promote the current state to be a final version.</li> </ul> <pre><code>Created new semver tag: v0.1.2\n</code></pre>"},{"location":"examples/SINGLE_PROJECT/#10-run-gradlew-createsemvertag-psemverstagefinal-psemverscopemajor","title":"10. Run <code>./gradlew createSemverTag \"-Psemver.stage=final\" \"-Psemver.scope=major</code>","text":"<ul> <li>Without changing the state, promote the current state to be the <code>1.0.0</code> version.</li> </ul>"},{"location":"examples/SINGLE_PROJECT/#11-run-gradlew-publishtomavenlocal-psemverstagesnapshot","title":"11. Run <code>./gradlew publishToMavenLocal \"-Psemver.stage=snapshot\"</code>","text":"<ul> <li>A common approach is publishing the artifacts to the snapshot repository with each commit merged   to some branch.</li> <li>Without changing the state and without creating a new tag, the project uses the next patched   version by just submitting the snapshot scope.</li> </ul> <pre><code>semver: 1.0.1-SNAPSHOT\n</code></pre>"},{"location":"projects/gradle-version/gradle-version/","title":"Module gradle-version","text":"<p>Semantic versioning implementation with Gradle version ordering rules</p>"},{"location":"projects/semver-gradle-plugin/semver-gradle-plugin/","title":"Module semver-gradle-plugin","text":""},{"location":"projects/semver-gradle-plugin/semver-gradle-plugin/#apply-the-plugin","title":"Apply the plugin","text":"<p>On projects:</p> <pre><code>// build.gradle.kts\nplugins {\n    id(\"com.javiersc.semver\") version \"$version\"\n}\n</code></pre> <p>On settings:</p> <pre><code>// settings.gradle.kts\nplugins {\n    id(\"com.javiersc.semver\") version \"$version\"\n}\n</code></pre> <p>Check the README.md for more info</p>"},{"location":"projects/semver-project-gradle-plugin/semver-project-gradle-plugin/","title":"Module semver-project-gradle-plugin","text":""},{"location":"projects/semver-project-gradle-plugin/semver-project-gradle-plugin/#apply-the-plugin","title":"Apply the plugin","text":"<pre><code>// build.gradle.kts\nplugins {\n    id(\"com.javiersc.semver\") version \"$version\"\n}\n</code></pre> <p>Check the README.md for more info</p>"},{"location":"projects/semver-settings-gradle-plugin/semver-settings-gradle-plugin/","title":"Module semver-settings-gradle-plugin","text":""},{"location":"projects/semver-settings-gradle-plugin/semver-settings-gradle-plugin/#apply-the-plugin","title":"Apply the plugin","text":"<pre><code>// settings.gradle.kts\nplugins {\n    id(\"com.javiersc.semver\") version \"$version\"\n}\n</code></pre> <p>Check the README.md for more info</p>"}]}